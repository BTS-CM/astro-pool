{"version":3,"file":"background.js","mappings":";;;;;;;;;;;;;;;;AAAmC;AACnC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,YAAY,iCAAiC;AAC7C,YAAY;AACZ;AACA;AACA;AACA,iBAAiB,0CAAI;AACrB,IAAI,0CAAI;AACR;;;;;;;;;;;;;;;;;;;;;ACvBsC;AACW;AACb;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gDAAI;AACtB;AACA;AACA;AACA,kBAAkB,yCAAyC;AAC3D,yCAAyC,OAAO;AAChD;AACA,UAAU;AACV,0BAA0B,wCAAwC;AAClE;AACA;AACA;AACA,uBAAuB,2DAAkB;AACzC,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,0BAA0B,6CAA6C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,0BAA0B,6CAA6C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,0BAA0B,8CAA8C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,0BAA0B,oCAAoC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wCAAM;AAC7B,UAAU;AACV,0BAA0B,2CAA2C;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,0BAA0B,0CAA0C;AACpE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;AC5HA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;ACNwB;AACJ;AACU;AAC9B;AAQkB;AAClB;AAC+D;AACV;AACrD;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB,EAAE,4CAAM;AACpC;AACA,qBAAqB,mDAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gDAAS;AAC9B,SAAS;AACT;AACA,KAAK;AACL;AACA,uBAAuB,8CAAO;AAC9B,mBAAmB,wDAAc;AACjC;AACA;AACA,KAAK;AACL;AACA,IAAI,4EAAmB;AACvB;AACA;AACA;AACA,eAAe,0CAAI,CAAC,gDAAS;AAC7B,wBAAwB,0CAAI;AAC5B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,yCAAG;AACnB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,6CAAO;AACX,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,6CAAO;AACX,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,mCAAmC,UAAU;AAC7C,8BAA8B,KAAK;AACnC,6BAA6B,KAAK;AAClC,kCAAkC,UAAU;AAC5C,gCAAgC,QAAQ;AACxC,gCAAgC,QAAQ;AACxC,6BAA6B,KAAK;AAClC,kCAAkC,UAAU;AAC5C;AACA;AACA;AACA,yCAAyC,eAAe;AACxD,UAAU;AACV,0BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,6CAAO;AACX,gBAAgB,mCAAmC;AACnD;AACA;AACA;AACA,6BAA6B,kEAAgB;AAC7C,UAAU;AACV,0BAA0B,OAAO;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,yCAAG;AACH;AACA,kBAAkB,kDAAW;AAC7B;AACA;AACA,uBAAuB,yCAAG;AAC1B;AACA;AACA,QAAQ,yCAAG;AACX;AACA;AACA,IAAI,yCAAG;AACP;AACA,KAAK;AACL,EAAE;AACF,IAAI,yCAAG;AACP;AACA,KAAK;AACL;AACA,IAAI,yCAAG;AACP;AACA,YAAY,yCAAG;AACf;AACA,KAAK;AACL;AACA,IAAI,yCAAG;AACP;AACA;AACA;AACA,KAAK;AACL","sources":["webpack://bitshares_astro_ui/./src/lib/applicationMenu.js","webpack://bitshares_astro_ui/./src/lib/deeplink.js","webpack://bitshares_astro_ui/external commonjs \"bitsharesjs\"","webpack://bitshares_astro_ui/external commonjs \"bitsharesjs-ws\"","webpack://bitshares_astro_ui/external commonjs \"electron\"","webpack://bitshares_astro_ui/external commonjs \"express\"","webpack://bitshares_astro_ui/external commonjs \"uuid\"","webpack://bitshares_astro_ui/external node-commonjs \"os\"","webpack://bitshares_astro_ui/external node-commonjs \"path\"","webpack://bitshares_astro_ui/webpack/bootstrap","webpack://bitshares_astro_ui/webpack/runtime/compat get default export","webpack://bitshares_astro_ui/webpack/runtime/define property getters","webpack://bitshares_astro_ui/webpack/runtime/hasOwnProperty shorthand","webpack://bitshares_astro_ui/webpack/runtime/make namespace object","webpack://bitshares_astro_ui/./src/background.js"],"sourcesContent":["import {app, Menu} from 'electron';\r\n\r\n/**\r\n * For configuring the electron window menu\r\n */\r\nexport function initApplicationMenu(mainWindow) {\r\n    const template = [\r\n      {\r\n        label: 'View',\r\n        submenu: [\r\n          {\r\n            label: 'Send to tray',\r\n            click() {\r\n              mainWindow.minimize();\r\n            }\r\n          },\r\n          { label: 'Reload', role: 'reload' },\r\n          { label: 'Dev tools', role: 'toggleDevTools' }\r\n        ]\r\n      }\r\n    ];\r\n    const menu = Menu.buildFromTemplate(template);\r\n    Menu.setApplicationMenu(menu);\r\n}\r\n","import { Apis } from \"bitsharesjs-ws\";\r\nimport { TransactionBuilder } from \"bitsharesjs\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst chains = {\r\n    bitshares: {\r\n        nodeList: [\r\n            {\r\n            url: \"wss://node.xbts.io/ws\",\r\n            },\r\n            {\r\n            url: \"wss://api.bts.mobi/ws\",\r\n            },\r\n            {\r\n            url: \"wss://api.bitshares.bhuz.info/ws\",\r\n            },\r\n            {\r\n            url: \"wss://btsws.roelandp.nl/ws\",\r\n            },\r\n        ],\r\n    },\r\n    bitshares_testnet: {\r\n        nodeList: [\r\n            {\r\n            url: \"wss://testnet.dex.trading/\",\r\n            },\r\n            {\r\n            url: \"wss://testnet.xbts.io/ws\",\r\n            },\r\n            {\r\n            url: \"wss://api-testnet.61bts.com/ws\",\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nasync function generateDeepLink(chain, opType, operations) {\r\n    return new Promise(async (resolve, reject) => {\r\n        const _node = chains[chain].nodeList[0].url\r\n\r\n        try {\r\n            await Apis.instance(\r\n                _node,\r\n                true,\r\n                4000,\r\n                { enableCrypto: false, enableOrders: true },\r\n                (error) => console.log({ error })\r\n            ).init_promise;\r\n        } catch (error) {\r\n            console.log({ error, location: \"api instance failed\" });\r\n            return reject(error);\r\n        }\r\n\r\n        const tr = new TransactionBuilder();\r\n        for (let i = 0; i < operations.length; i++) {\r\n            tr.add_type_operation(opType, operations[i]);\r\n        }\r\n\r\n        try {\r\n            await tr.update_head_block();\r\n        } catch (error) {\r\n            console.log({ error, location: \"update head block failed\" });\r\n            reject(error);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await tr.set_required_fees();\r\n        } catch (error) {\r\n            console.log({ error, location: \"set required fees failed\" });\r\n            reject(error);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            tr.set_expire_seconds(7200);\r\n        } catch (error) {\r\n            console.log({ error, location: \"set expire seconds failed\" });\r\n            reject(error);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            tr.finalize();\r\n        } catch (error) {\r\n            console.log({ error, location: \"finalize failed\" });\r\n            reject(error);\r\n            return;\r\n        }\r\n\r\n        let id;\r\n        try {\r\n            id = await uuidv4();\r\n        } catch (error) {\r\n            console.log({ error, location: \"uuid generation failed\" });\r\n            reject(error);\r\n            return;\r\n        }\r\n\r\n        const request = {\r\n            type: \"api\",\r\n            id: id,\r\n            payload: {\r\n                method: \"injectedCall\",\r\n                params: [\"signAndBroadcast\", JSON.stringify(tr.toObject()), []],\r\n                appName: \"Bitshares Astro UI\",\r\n                chain: chain === \"bitshares\" ? \"BTS\" : \"BTS_TEST\",\r\n                browser: \"web browser\",\r\n                origin: \"localhost\",\r\n            },\r\n        };\r\n\r\n        let encodedPayload;\r\n        try {\r\n            encodedPayload = encodeURIComponent(JSON.stringify(request));\r\n        } catch (error) {\r\n            console.log({ error, location: \"encode payload failed\" });\r\n            reject(error);\r\n            return;\r\n        }\r\n\r\n        resolve(encodedPayload);\r\n    });\r\n}\r\n\r\nexport { generateDeepLink };","module.exports = require(\"bitsharesjs\");","module.exports = require(\"bitsharesjs-ws\");","module.exports = require(\"electron\");","module.exports = require(\"express\");","module.exports = require(\"uuid\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import path from \"path\";\r\nimport os from \"os\";\r\nimport express from \"express\";\r\n\r\nimport {\r\n    app,\r\n    BrowserWindow,\r\n    Menu,\r\n    Tray,\r\n    ipcMain,\r\n    screen,\r\n} from \"electron\";\r\n\r\nimport { initApplicationMenu } from \"./lib/applicationMenu.js\";\r\nimport { generateDeepLink } from \"./lib/deeplink.js\";\r\n\r\nlet mainWindow = null;\r\nlet tray = null;\r\n\r\nconst createWindow = async () => {\r\n    const { width, height } = screen.getPrimaryDisplay().workAreaSize;\r\n\r\n    mainWindow = new BrowserWindow({\r\n        width: width,\r\n        height: height,\r\n        minWidth: 480,\r\n        minHeight: 695,\r\n        maxWidth: width,\r\n        maximizable: true,\r\n        maxHeight: height,\r\n        useContentSize: true,\r\n        autoHideMenuBar: true,\r\n        webPreferences: {\r\n            nodeIntegration: false,\r\n            contextIsolation: true,\r\n            sandbox: true,\r\n            preload: path.join(__dirname, \"preload.js\"),\r\n        },\r\n        icon: __dirname + \"/img/taskbar.png\",\r\n    });\r\n    \r\n    const expressApp = express();\r\n    expressApp.use(express.static('astroDist'));\r\n    expressApp.listen(8080, () => {\r\n        console.log(\"Express server listening on port 8080\");\r\n    });\r\n\r\n    initApplicationMenu(mainWindow);\r\n\r\n    mainWindow.loadURL('http://localhost:8080/index.html');\r\n\r\n    tray = new Tray(path.join(__dirname, \"img\", \"tray.png\"));\r\n    const contextMenu = Menu.buildFromTemplate([\r\n        {\r\n            label: \"Show App\",\r\n            click: function () {\r\n                mainWindow?.show();\r\n            },\r\n        },\r\n        {\r\n            label: \"Quit\",\r\n            click: function () {\r\n                tray = null;\r\n                app.quit();\r\n            },\r\n        },\r\n    ]);\r\n\r\n    tray.setToolTip(\"Bitshares Astro UI\");\r\n\r\n    tray.on(\"right-click\", (event, bounds) => {\r\n        tray?.popUpContextMenu(contextMenu);\r\n    });\r\n\r\n    ipcMain.handle(\"fetchTopMarkets\", async (event, arg) => {\r\n        const { chain } = arg;\r\n\r\n        let retrievedData;\r\n        try {\r\n            retrievedData = await fetch(\r\n                chain === \"bitshares\"\r\n                    ? `https://api.bitshares.ws/openexplorer/top_markets?top_n=100`\r\n                    : `https://api.testnet.bitshares.ws/openexplorer/top_markets?top_n=50`\r\n            );\r\n        } catch (error) {\r\n            console.log({error})\r\n        }\r\n      \r\n        if (!retrievedData || !retrievedData.ok) {\r\n            console.log(\"Failed to fetch top markets\");\r\n            return;\r\n        }\r\n    \r\n        const topMarkets = await retrievedData.json();\r\n        return topMarkets ?? null;\r\n    });\r\n\r\n    ipcMain.handle(\"fetchAccountHistory\", async (event, arg) => {\r\n        const { chain, accountID } = arg;\r\n\r\n        const from = arg.from ?? 0;\r\n        const size = arg.size ?? 100;\r\n        const from_date = arg.from_date ?? \"2015-10-10\";\r\n        const to_date = arg.to_date ?? \"now\";\r\n        const sort_by = arg.sort_by ?? \"-operation_id_num\";\r\n        const type = arg.type ?? \"data\";\r\n        const agg_field = arg.agg_field ?? \"operation_type\";\r\n\r\n        const url = `https://${\r\n                        chain === \"bitshares\" ? \"api\" : \"api.testnet\"\r\n                    }.bitshares.ws/openexplorer/es/account_history` +\r\n                    `?account_id=${accountID}` +\r\n                    `&from_=${from}` +\r\n                    `&size=${size}` +\r\n                    `&from_date=${from_date}` +\r\n                    `&to_date=${to_date}` +\r\n                    `&sort_by=${sort_by}` +\r\n                    `&type=${type}` +\r\n                    `&agg_field=${agg_field}`;\r\n\r\n        let history;\r\n        try {\r\n            history = await fetch(url, { method: \"GET\" });\r\n        } catch (error) {\r\n            console.log({ error });\r\n            return null;\r\n        }\r\n\r\n        if (!history || !history.ok) {\r\n            console.log(\"Couldn't fetch account history.\");\r\n            return null;\r\n        }\r\n\r\n        const accountHistory = await history.json();     \r\n        return accountHistory ?? null;\r\n    });\r\n\r\n    ipcMain.handle(\"generateDeepLink\", async (event, arg) => {\r\n        const { usrChain, operationName, trxJSON } = arg;\r\n\r\n        let deeplink;\r\n        try {\r\n            deeplink = await generateDeepLink(usrChain, operationName, trxJSON);\r\n        } catch (error) {\r\n            console.log({ error });\r\n        }\r\n\r\n        return deeplink ?? null;\r\n    });\r\n\r\n    tray.on(\"click\", () => {\r\n        mainWindow?.setAlwaysOnTop(true);\r\n        mainWindow?.show();\r\n        mainWindow?.focus();\r\n        mainWindow?.setAlwaysOnTop(false);\r\n    });\r\n\r\n    tray.on(\"balloon-click\", () => {\r\n        mainWindow?.setAlwaysOnTop(true);\r\n        mainWindow?.show();\r\n        mainWindow?.focus();\r\n        mainWindow?.setAlwaysOnTop(false);\r\n    });\r\n};\r\n\r\napp.disableHardwareAcceleration();\r\n\r\nconst currentOS = os.platform();\r\nif (currentOS === \"win32\" || currentOS === \"linux\") {\r\n    // windows + linux setup phase\r\n    const gotTheLock = app.requestSingleInstanceLock();\r\n\r\n    if (!gotTheLock) {\r\n        app.quit();\r\n    }\r\n\r\n    app.whenReady().then(() => {\r\n        createWindow();\r\n    });\r\n} else {\r\n    app.whenReady().then(() => {\r\n        createWindow();\r\n    });\r\n\r\n    app.on(\"window-all-closed\", () => {\r\n        if (process.platform !== \"darwin\") {\r\n            app.quit();\r\n        }\r\n    });\r\n\r\n    app.on(\"activate\", () => {\r\n        if (mainWindow === null) {\r\n            createWindow();\r\n        }\r\n    });\r\n}\r\n"],"names":[],"sourceRoot":""}