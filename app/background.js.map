{"version":3,"file":"background.js","mappings":";;;;;;;;;;;;;;;;AAAmC;AACnC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,YAAY,iCAAiC;AAC7C,YAAY;AACZ;AACA;AACA;AACA,iBAAiB,0CAAI;AACrB,IAAI,0CAAI;AACR;;;;;;;;;;;ACvBA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;ACNwB;AACF;AACF;AACU;AAC9B;AAUkB;AAClB;AAC+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS,EAAE,mBAAO,CAAC,0BAAU;AACzC,YAAY,gBAAgB;AAC5B;AACA,qBAAqB,mDAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gDAAS;AAC9B,SAAS;AACT;AACA,KAAK;AACL;AACA,gBAAgB,8CAAO;AACvB,YAAY,wDAAc;AAC1B;AACA;AACA,IAAI,4EAAmB;AACvB;AACA;AACA;AACA,eAAe,0CAAI;AACnB,wBAAwB,0CAAI;AAC5B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6CAAO;AACX;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA,gBAAgB,2CAAK;AACrB,cAAc;AACd;AACA,gEAAgE,OAAO;AACvE;AACA;AACA,UAAU;AACV,iDAAiD,YAAY;AAC7D;AACA,KAAK;AACL;AACA,IAAI,6CAAO;AACX;AACA;AACA;AACA;AACA,YAAY,oDAAW;AACvB;AACA;AACA;AACA;AACA,gBAAgB,kDAAY;AAC5B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,yCAAG;AACH;AACA,gBAAgB,kDAAW;AAC3B;AACA;AACA,uBAAuB,yCAAG;AAC1B;AACA;AACA,QAAQ,yCAAG;AACX;AACA;AACA,IAAI,yCAAG;AACP;AACA,KAAK;AACL,EAAE;AACF,IAAI,yCAAG;AACP;AACA,KAAK;AACL;AACA,IAAI,yCAAG;AACP;AACA,YAAY,yCAAG;AACf;AACA,KAAK;AACL;AACA,IAAI,yCAAG;AACP;AACA;AACA;AACA,KAAK;AACL","sources":["webpack://bitshares_astro_ui/./src/lib/applicationMenu.js","webpack://bitshares_astro_ui/external commonjs \"electron\"","webpack://bitshares_astro_ui/external commonjs \"express\"","webpack://bitshares_astro_ui/external node-commonjs \"os\"","webpack://bitshares_astro_ui/external node-commonjs \"path\"","webpack://bitshares_astro_ui/external node-commonjs \"url\"","webpack://bitshares_astro_ui/webpack/bootstrap","webpack://bitshares_astro_ui/webpack/runtime/compat get default export","webpack://bitshares_astro_ui/webpack/runtime/define property getters","webpack://bitshares_astro_ui/webpack/runtime/hasOwnProperty shorthand","webpack://bitshares_astro_ui/webpack/runtime/make namespace object","webpack://bitshares_astro_ui/./src/background.js"],"sourcesContent":["import {app, Menu} from 'electron';\r\n\r\n/**\r\n * For configuring the electron window menu\r\n */\r\nexport function initApplicationMenu(mainWindow) {\r\n    const template = [\r\n      {\r\n        label: 'View',\r\n        submenu: [\r\n          {\r\n            label: 'Send to tray',\r\n            click() {\r\n              mainWindow.minimize();\r\n            }\r\n          },\r\n          { label: 'Reload', role: 'reload' },\r\n          { label: 'Dev tools', role: 'toggleDevTools' }\r\n        ]\r\n      }\r\n    ];\r\n    const menu = Menu.buildFromTemplate(template);\r\n    Menu.setApplicationMenu(menu);\r\n}\r\n","module.exports = require(\"electron\");","module.exports = require(\"express\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"url\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import path from \"path\";\r\nimport url from \"url\";\r\nimport os from \"os\";\r\nimport express from \"express\";\r\n\r\nimport {\r\n    app,\r\n    BrowserWindow,\r\n    Menu,\r\n    Tray,\r\n    dialog,\r\n    ipcMain,\r\n    Notification,\r\n    shell,\r\n} from \"electron\";\r\n\r\nimport { initApplicationMenu } from \"./lib/applicationMenu.js\";\r\n\r\nlet mainWindow;\r\nlet tray = null;\r\n\r\n/*\r\n * Creating the primary window, only runs once.\r\n */\r\nconst createWindow = async () => {\r\n    const { screen } = require('electron');\r\n    const { width, height } = screen.getPrimaryDisplay().workAreaSize;\r\n\r\n    mainWindow = new BrowserWindow({\r\n        width: width,\r\n        height: height,\r\n        minWidth: 480,\r\n        minHeight: 695,\r\n        maxWidth: width,\r\n        maximizable: true,\r\n        maxHeight: height,\r\n        useContentSize: true,\r\n        autoHideMenuBar: true,\r\n        webPreferences: {\r\n            nodeIntegration: false, // Keep false for security\r\n            contextIsolation: true, // Keep true for security\r\n            enableRemoteModule: false, // Keep false for security\r\n            sandbox: true, // Keep true for security\r\n            preload: path.join(__dirname, \"preload.js\"),\r\n        },\r\n        icon: __dirname + \"/img/beet-taskbar.png\",\r\n    });\r\n    \r\n    const app = express();\r\n    app.use(express.static('astroDist'));\r\n    app.listen(8080);\r\n\r\n    initApplicationMenu(mainWindow);\r\n\r\n    mainWindow.loadURL('http://localhost:8080/index.html');\r\n\r\n    tray = new Tray(__dirname + \"/img/beet-tray.png\");\r\n    const contextMenu = Menu.buildFromTemplate([\r\n        {\r\n            label: \"Show App\",\r\n            click: function () {\r\n                mainWindow.show();\r\n            },\r\n        },\r\n        {\r\n            label: \"Quit\",\r\n            click: function () {\r\n                app.isQuiting = true;\r\n                tray = null;\r\n                app.quit();\r\n            },\r\n        },\r\n    ]);\r\n\r\n    tray.setToolTip(\"Bitshares Astro UI\");\r\n\r\n    tray.on(\"right-click\", (event, bounds) => {\r\n        tray.popUpContextMenu(contextMenu);\r\n    });\r\n\r\n    const safeDomains = [ // TODO: REPLACE WITH SAFE BTS DOMAINS\r\n        \"bloks.io\",\r\n        \"explore.beos.world\",\r\n        \"blocksights.info\",\r\n        \"telos.eosx.io\",\r\n    ];\r\n    ipcMain.on(\"openURL\", (event, arg) => {\r\n        try {\r\n            const parsedUrl = new url.URL(arg);\r\n            const domain = parsedUrl.hostname;\r\n            if (safeDomains.includes(domain)) {\r\n                shell.openExternal(arg);\r\n            } else {\r\n                console.error(\r\n                    `Rejected opening URL with unsafe domain: ${domain}`\r\n                );\r\n            }\r\n        } catch (err) {\r\n            console.error(`Failed to open URL: ${err.message}`);\r\n        }\r\n    });\r\n\r\n    ipcMain.on(\"notify\", (event, arg) => {\r\n        const NOTIFICATION_TITLE = \"Beet wallet notification\";\r\n        const NOTIFICATION_BODY =\r\n            arg == \"request\" ? \"Beet has received a new request.\" : arg;\r\n\r\n        if (os.platform === \"win32\") {\r\n            app.setAppUserModelId(app.name);\r\n        }\r\n\r\n        function showNotification() {\r\n            new Notification({\r\n                title: NOTIFICATION_TITLE,\r\n                subtitle: \"subtitle\",\r\n                body: NOTIFICATION_BODY,\r\n                icon: __dirname + \"/img/beet-tray.png\",\r\n            }).show();\r\n        }\r\n\r\n        showNotification();\r\n    });\r\n\r\n    tray.on(\"click\", () => {\r\n        mainWindow.setAlwaysOnTop(true);\r\n        mainWindow.show();\r\n        mainWindow.focus();\r\n        mainWindow.setAlwaysOnTop(false);\r\n    });\r\n\r\n    tray.on(\"balloon-click\", () => {\r\n        mainWindow.setAlwaysOnTop(true);\r\n        mainWindow.show();\r\n        mainWindow.focus();\r\n        mainWindow.setAlwaysOnTop(false);\r\n    });\r\n};\r\n\r\napp.disableHardwareAcceleration();\r\n\r\nlet currentOS = os.platform();\r\nif (currentOS === \"win32\" || currentOS === \"linux\") {\r\n    // windows + linux setup phase\r\n    const gotTheLock = app.requestSingleInstanceLock();\r\n\r\n    if (!gotTheLock) {\r\n        app.quit();\r\n    }\r\n\r\n    app.whenReady().then(() => {\r\n        createWindow();\r\n    });\r\n} else {\r\n    app.whenReady().then(() => {\r\n        createWindow();\r\n    });\r\n\r\n    app.on(\"window-all-closed\", () => {\r\n        if (process.platform !== \"darwin\") {\r\n            app.quit();\r\n        }\r\n    });\r\n\r\n    app.on(\"activate\", () => {\r\n        if (mainWindow === null) {\r\n            createWindow();\r\n        }\r\n    });\r\n}\r\n"],"names":[],"sourceRoot":""}