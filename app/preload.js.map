{"version":3,"file":"preload.js","mappings":"mBAAA,MAAM,EAA+BA,QAAQ,YCE7C,EAAAC,cAAcC,kBAAkB,WAAY,CAExCC,QAASC,MAAOC,GAAW,EAAAC,YAAYC,KAAK,UAAWF,GAUvDG,gBAAiBJ,MAAOK,GAAS,EAAAH,YAAYI,OAAO,kBAAmBD,GACvEE,oBAAqBP,MAAOK,GAAS,EAAAH,YAAYI,OAAO,sBAAuBD,GAE/EG,iBAAkBR,MAAOK,GAAS,EAAAH,YAAYI,OAAO,mBAAoBD,I","sources":["webpack://bitshares_astro_ui/external node-commonjs \"electron\"","webpack://bitshares_astro_ui/./src/preload.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { ipcRenderer, contextBridge } from 'electron';\r\n\r\ncontextBridge.exposeInMainWorld('electron', {\r\n    // MISC\r\n    openURL: async (target) => ipcRenderer.send('openURL', target), // Links to explorers\r\n    //notify: async (msg) => ipcRenderer.send('notify', msg), // Triggering an electron notification prompt\r\n    /*\r\n    setNode: (func) => { // For storing the current connected blockchain node\r\n        ipcRenderer.on('setNode', (event, args) => {\r\n            func(args);\r\n        });\r\n    },\r\n    */\r\n    // REST queries\r\n    fetchTopMarkets: async (args) => ipcRenderer.invoke('fetchTopMarkets', args),\r\n    fetchAccountHistory: async (args) => ipcRenderer.invoke('fetchAccountHistory', args),\r\n    // API queries\r\n    generateDeepLink: async (args) => ipcRenderer.invoke('generateDeepLink', args),\r\n    /*\r\n    // For logging background issues to renderer dev console\r\n    onMainLog: async (func) => {\r\n        ipcRenderer.on(\"mainLog\", (event, data) => {\r\n            func(data);\r\n        })\r\n    },\r\n    */\r\n});\r\n"],"names":["require","contextBridge","exposeInMainWorld","openURL","async","target","ipcRenderer","send","fetchTopMarkets","args","invoke","fetchAccountHistory","generateDeepLink"],"sourceRoot":""}